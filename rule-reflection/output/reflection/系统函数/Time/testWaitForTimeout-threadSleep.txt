##功能##
该函数用于暂停当前线程执行指定的毫秒时间，常用于需要定时延迟或控制执行节奏的场景，如按键响应后延迟处理、周期性任务调度等。

##vba规范##
函数名：threadSleep
参数：delaytime (int类型，单位毫秒)
返回值：无
功能：使当前线程暂停执行指定毫秒数
内置依赖：无

##capl规范##
函数名：testWaitForTimeout
参数：timeout (long类型，单位毫秒)
返回值：无
功能：暂停当前测试节点执行指定时间

示例1：
on key 'k' {
  testWaitForTimeout(10);
  write("延时10毫秒后执行");
}

示例2：
variables {
  long delay = 100;
}
on start {
  testWaitForTimeout(delay);
  write("程序启动延迟100ms");
}

##capl名##
testWaitForTimeout

##转换须知##
1. 参数类型差异：VBA使用int而CAPL使用long，但实际使用时数值范围通常无影响
2. 函数名差异：CAPL使用testWaitForTimeout而非threadSleep
3. 上下文差异：CAPL通常在测试节点(test node)中使用，而VBA可能在任意线程中使用
4. 异常处理：CAPL中过长的延迟可能导致总线超时错误

##转换示例##
1. CAPL原始代码：
on key 'a' {
  testWaitForTimeout(50);
  write("按键A延迟处理");
}

2. 转换后VBA代码：
@onKey('A')
def onKeyEvent():
    threadSleep(50)
    writeInfo("按键A延迟处理")

3. 关键转换说明：
- 事件处理语法从CAPL的on key改为VBA的@onKey装饰器
- 延时函数从testWaitForTimeout改为threadSleep
- 输出函数从write改为writeInfo
- 保持相同的延迟时间50ms和业务逻辑