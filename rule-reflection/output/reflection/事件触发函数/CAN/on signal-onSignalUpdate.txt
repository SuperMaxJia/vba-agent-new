##功能##
该函数用于在接收到指定信号更新时触发事件处理，主要用于监控CAN总线上的特定信号变化。典型应用场景包括车辆状态监控、故障诊断和实时数据显示等。

##vba规范##
函数定义：@onSignalUpdate装饰器声明事件监听
参数：onsignal - CANDBCSignal类型，指定要监听的DBC信号
      signal - CANDBCSignal类型，包含接收到的信号属性
返回值：无
属性方法：getName(), getComment(), getPhysVal(), getRawVal()

##capl规范##
在CAPL中使用on signal事件处理信号更新：
1. 基本语法：
on signal <SignalName>
{
    // 处理代码
}

2. 示例1（简单信号处理）：
on signal CAN1::ESP_Status::ESP_VehicleSpeed
{
    write("Signal Name: %s", this.name);
    write("Physical Value: %f", this.phys);
}

3. 示例2（带条件处理）：
on signal CAN1::EngineData::RPM
{
    if(this.phys > 3000) {
        write("WARNING: High RPM detected!");
    }
}

##capl名##
on signal

##转换须知##
1. CAPL使用"::"作为命名空间分隔符，而VBA使用"."
2. CAPL中信号属性直接访问（this.phys），VBA需要调用方法（getPhysVal()）
3. CAPL不支持装饰器语法，事件绑定直接在事件声明中完成
4. CAPL中所有信号处理都在同一网段，无需特别声明

##转换示例##
1. CAPL原始代码：
on signal CAN1::ESP_Status::ESP_VehicleSpeed
{
    write("Name: %s", this.name);
    write("Value: %f", this.phys);
}

2. 转换后的VBA代码：
@onSignalUpdate(CAN1.ESP_Status.ESP_VehicleSpeed)
def onSignalUpdateEvent(signal):
    writeInfo(signal.getName())
    writeInfo(str(signal.getPhysVal()))

3. 关键转换说明：
- 将"::"分隔符改为"."分隔符
- CAPL的this.name转换为getName()方法调用
- CAPL的直接值访问改为方法调用
- 添加必要的类型转换（如str()）